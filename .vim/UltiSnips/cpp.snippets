# templates
snippet templ "template" b
#include <iostream>
using namespace std;

int main() {
	$0
}
endsnippet

snippet templ-arg "template with arg inputs" b
#include <iostream>
using namespace std;

int main(int argc, char *argv[]) {
	$0
}
endsnippet

snippet templ-algo "template with macros" b
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

typedef long long ll;
typedef pair<int,int> pi;
typedef vector<int> vi;

#define mp make_pair
#define f first
#define s second
#define pb push_back
#define lb lower_bound
#define ub upper_bound
#define FOR(i,a,b) for (int i=(a); i<(b); i++)
#define F0R(i,a) FOR(i,0,a)
#define ROF(i,a,b) for (int i=(b)-1; i>=(a); i--)
#define R0F(i,a) ROF(i,0,a)
#define trav(a,x) for (auto &a : x)

int main() {
	$0
}
endsnippet

snippet main.arg "in case you forget" i
int argc, char *argv[]
endsnippet


# useful stuff
snippet ll "long long"
long long
endsnippet

snippet ",{{ " "brackets" rA
{
	${1:${VISUAL}}
}
endsnippet


# pair stuff
snippet pair "pair"
pair<${1:int},${2:int}>
endsnippet

snippet pi "integer pair"
pair<int,int>
endsnippet

snippet mp "make_pair" i
make_pair(${1:x},${2:y})
endsnippet

snippet .f "first" i
.first
endsnippet

snippet .s "second" i
.second
endsnippet


# vector stuff
snippet vec "vector"
vector<${1:int}>
endsnippet

snippet vi "integer vector"
vector<int>
endsnippet

snippet .pb "push_back" i
.push_back($1)
endsnippet

snippet vall "begin, end" i
${1:v}.begin(), $1.end()
endsnippet

snippet vrall "begin, end" i
${1:v}.rbegin(), $1.rend()
endsnippet

snippet .lb "lower_bound"
lower_bound($1)
endsnippet

snippet .ub "upper_bound"
upper_bound($1)
endsnippet


# for loops
snippet for "for loop"
for (int ${1:i}=${2:0}; $1<${3:n}; $1++) $0
endsnippet

snippet f0r "for loop starting at 0"
for (int ${1:i}=0; $1<${2:n}; $1++) $0
endsnippet

snippet for= "for loop with <="
for (int ${1:i}=${2:0}; $1<=${3:n}; $1++) $0
endsnippet

snippet f0r= "for loop starting at 0 with <="
for (int ${1:i}=0; $1<=${2:n}; $1++) $0
endsnippet

snippet rof "reverse for loop"
for (int ${1:i}=${2:n}; $1>=${3:0}; $1--) $0
endsnippet

snippet r0f "reverse for loop ending at 0"
for (int ${1:i}=${2:n}; $1>=0; $1--) $0
endsnippet

snippet rof> "reverse for loop with >"
for (int ${1:i}=${2:n}; $1>=${3:0}; $1--) $0
endsnippet

snippet r0f> "reverse for loop ending at 0 with >"
for (int ${1:i}=${2:n}; $1>0; $1--) $0
endsnippet

snippet for* "for loop for pointers"
for (${1:int} *${2:i}=${3:p}; *$2 != ${4:n}; $2++) $0
endsnippet

snippet trav "traverse"
for (auto& ${1:x} : $2) $0
endsnippet
